name: Template
on:
  push:
    branches:
      - 'dev'

env:
  GODOT_BASE_BRANCH: master-v2
  SCONSFLAGS: verbose=yes warnings=extra werror=no module_text_server_fb_enabled=no

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-linux:
    permissions: write-all
    runs-on: ubuntu-22.04
    name: ${{ matrix.name }}
    outputs:
      status: ${{ steps.early.outputs.status }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Minimal Template (target=editor, everything disabled)
            cache-name: linux-template-minimal
            target: editor
            tests: false
            artifact: true
    steps:
      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.10'
          architecture: 'x64'

      - name: Download build.zip
        env:
          ITCH_API_KEY: ${{ secrets.ITCH_API_KEY }}
          repo: gdscript-transpiler-bin
          username: linuxusergd
          artifact_name: gdscript-transpiler-bin-linux.zip
        run: |
          gameid=$(curl https://$username.itch.io/$repo/data.json | sed 's/.*"id":"\{0,1\}\([^,"]*\)"\{0,1\}.*/\1/' | sed 's/}//g')
          uploadid=$(curl https://itch.io/api/1/$ITCH_API_KEY/game/$gameid/uploads | python -m json.tool | grep -e 'p_linux' -e 'upload_id' | sed -n '/true/{N; p}' | rev | cut -d " " -f1 | rev | cut -d "," -f1 | sed 's/true//g')
          gameurl=$(curl https://itch.io/api/1/$ITCH_API_KEY/upload/${uploadid:1}/download | sed 's/.*"url":"\{0,1\}\([^,"]*\)"\{0,1\}.*/\1/' | sed 's/\\//g')
          [[ $gameurl == *"errors"* ]] && gameid=$(curl https://$username.itch.io/$repo/data.json | sed 's/.*"id":"\{0,1\}\([^,"]*\)"\{0,1\}.*/\1/' | sed 's/}//g') && uploadid=$(curl https://itch.io/api/1/$ITCH_API_KEY/game/$gameid/uploads | python -m json.tool | grep -e 'p_linux' -e 'upload_id' | sed -n '/true/{N; p}' | rev | cut -d " " -f1 | rev | cut -d "," -f1 | sed 's/true//g') && gameurl=$(curl https://itch.io/api/1/$ITCH_API_KEY/upload/${uploadid:1}/download | sed 's/.*"url":"\{0,1\}\([^,"]*\)"\{0,1\}.*/\1/' | sed 's/\\//g')
          curl $gameurl -o build.zip

      - name: Setup latest Alpine Linux
        uses: jirutka/setup-alpine@v1
        with:
          branch: edge
          arch: x86_64
          packages: >
            coreutils
            wget
            curl
            git
            bash
            tar
            file
            gzip
            sudo
            xz
          shell-name: alpine.sh

      - name: Run script inside Alpine chroot
        id: early
        env:
          github_token: ${{ secrets.TOKEN }}
        run: |
          rm *.import
          rm project.godot
          mkdir binary && mv build.zip binary/
          cd binary && unzip build.zip
          sudo chmod +x gds
          ./gds format=../bin/gds.gd
          ./gds setup=../setup.py
          cd ..
          tar --sort=name --owner=root:0 --group=root:0 --mtime='UTC 2023-01-01' -cJf archive.tar.xz gds/*.py bin/*.py test/*.py setup.py README.md
          echo "Uploading files to gist..."
          md5=$(md5sum archive.tar.xz | awk '{print $1}')
          git clone https://oauth:$github_token@gist.github.com/73d8e030a44eb7f91bdeaea96a321f6d.git
          cd 73d8e030a44eb7f91bdeaea96a321f6d
          md5_compare=$(md5sum *.tar.xz | awk '{print $1}')
          rm *.tar.xz
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"
          [[ $md5 == $md5_compare ]] && echo "Archive identical" && echo "status=skip" >> $GITHUB_OUTPUT && mv ../archive.tar.xz archive_md5.tar.xz
          [[ $md5 != $md5_compare ]]  && echo "New archive" && echo "status=deploy" >> $GITHUB_OUTPUT && mv ../archive.tar.xz archive.tar.xz
          git add -A && git commit -m "update archive.tar.xz" && git push origin
          cd .. 
          echo ${PWD}
        shell: alpine.sh {0}

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
          delete_workflow_pattern: Upload
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
          delete_workflow_pattern: Build
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
          delete_workflow_pattern: Template

  deploy:
    runs-on: ubuntu-22.04
    name: Deploy
    needs: build-linux
    if: needs.build-linux.outputs.status == 'deploy'

    steps:
      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Setup latest Alpine Linux
        uses: jirutka/setup-alpine@v1
        with:
          branch: edge
          arch: x86_64
          packages: >
            coreutils
            alsa-lib-dev
            libffi-dev
            ncurses-dev
            tcl-dev
            tk-dev
            zlib-dev
            gettext-dev
            wget
            curl
            perl
            libgcc
            gcc
            clang15-dev
            clang15-extra-tools
            clang15-libclang
            clang15-libs
            clang15-static
            llvm15-dev
            llvm-runtimes
            llvm-libunwind-dev
            llvm-libunwind-static
            llvm15-libs
            llvm15-static
            compiler-rt
            musl-dev
            openssl-dev
            linux-headers
            patchelf
            pkgconf
            make
            git
            bash
            tar
            file
            gzip
            sudo
            xz
          shell-name: alpine.sh
      - name: Compile binary
        env:
          github_token: ${{ secrets.TOKEN }}
        run: |
          export PYTHON_VERSION=3.10.10
          export REQUESTS_VERSION=2.28.2
          export OPENSSL_VERSION=3.0.8
          wget https://github.com/LinuxUserGD/Nuitka-Python/releases/download/v${PYTHON_VERSION}/python-${PYTHON_VERSION}.tar.xz
          wget https://github.com/LinuxUserGD/Nuitka-Python/releases/download/v${PYTHON_VERSION}/requests-${REQUESTS_VERSION}.tar.xz
          wget https://github.com/LinuxUserGD/Nuitka-Python/releases/download/v${PYTHON_VERSION}/openssl-${OPENSSL_VERSION}.tar.xz
          sudo mv python-${PYTHON_VERSION}.tar.xz /
          sudo mv requests-${REQUESTS_VERSION}.tar.xz /
          sudo mv openssl-${OPENSSL_VERSION}.tar.xz /
          cd /
          sudo tar xpvf python-${PYTHON_VERSION}.tar.xz --xattrs-include='*.*' --numeric-owner
          sudo tar xpvf requests-${REQUESTS_VERSION}.tar.xz --xattrs-include='*.*' --numeric-owner
          sudo tar xpvf openssl-${OPENSSL_VERSION}.tar.xz --xattrs-include='*.*' --numeric-owner
          cd -
          curl https://gist.githubusercontent.com/LinuxUserGD/73d8e030a44eb7f91bdeaea96a321f6d/raw/requirements.txt -o requirements.txt
          wget https://bootstrap.pypa.io/pip/get-pip.py
          sudo python3.10 get-pip.py
          sudo ln -sf /usr/bin/python3.10 /usr/bin/python
          sudo python3.10 -m pip install --upgrade pip
          sudo python3.10 -m pip install requests
          mv .github/workflows/api.py .
          python3.10 api.py
          tar xpvf archive.tar.xz --numeric-owner
          rm archive.tar.xz
          git clone https://oauth:$github_token@github.com/LinuxUserGD/gdscript-transpiler-source.git
          cd gdscript-transpiler-source
          rm -rf $(ls | grep -v "LICENSE\|requirements.txt\|sources.list")
          mkdir gds && cp ../gds/*.py gds/
          mkdir bin && cp ../bin/*.py bin/
          mkdir test &&  cp ../test/*.py test/
          cp ../setup.py .
          cp ../README.md .
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"
          git add -A && git commit -m "update python files" && git push origin
          cd ..
          sudo python3.10 -m pip install -r requirements.txt
          sudo python3.10 -m pip install git+https://github.com/Nuitka/Nuitka.git
          sudo python3.10 -m pip install xdis
          sudo python3.10 -m pip install git+https://github.com/rocky/x-python.git
          sudo python3.10 -m pip install -e .
          python3.10 -m gds format=bin/gds.gd
          python3.10 -m nuitka bin/gds.py --onefile --lto=yes --static-libpython=no --clang --assume-yes-for-downloads --include-package-data=blib2to3 --include-package-data=ziglang && mv gds.bin bin/gds
        shell: alpine.sh {0}
      - name: Upload main.dist
        uses: actions/upload-artifact@v3
        with:
          name: Linux Build
          path: /home/runner/work/gdscript-transpiler-bin/gdscript-transpiler-bin/bin/gds

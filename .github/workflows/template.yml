name: Template
on:
  push:
    branches:
      - 'dev'

# Global Settings
env:
  # Only used for the cache key. Increment version to force clean build.
  GODOT_BASE_BRANCH: master-v2
  SCONSFLAGS: verbose=yes warnings=extra werror=no module_text_server_fb_enabled=no

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-linux:
    permissions: write-all
    runs-on: ubuntu-22.04
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Minimal Template (target=editor, everything disabled)
            cache-name: linux-template-minimal
            target: editor
            tests: false
            sconsflags: dev_build=no module_text_server_adv_enabled=no deprecated=no minizip=no disable_3d=no use_llvm=yes module_certs_enabled=no module_embree_enabled=no module_enet_enabled=no module_freetype_enabled=no module_msdfgen_enabled=no module_glslang_enabled=no module_graphite_enabled=no module_harfbuzz_enabled=no module_icu_enabled=no module_libogg_enabled=no module_libtheora_enabled=no module_libvorbis_enabled=no module_libwebp_enabled=no module_wslay_enabled=no module_mbedtls_enabled=no module_miniupnpc_enabled=no module_pcre2_enabled=no module_pcre2_with_jit_enabled=no module_recast_enabled=no module_rvo2_enabled=no module_squish_enabled=no module_xatlas_enabled=no module_zlib_enabled=no module_zstd_enabled=no disable_advanced_gui=no deprecated=no minizip=no openxr=no opengl3=no use_static_cpp=yes linker=lld alsa=no pulseaudio=no speechd=no fontconfig=no udev=no x11=no debug_symbols=no separate_debug_symbols=no touch=no execinfo=no dbus=no use_volk=no module_websocket_enabled=no module_webm_enabled=no module_thekla_unwrap_enabled=no module_tga_enabled=no module_pvr_enabled=no module_opus_enabled=no module_mobile_vr_enabled=no module_hdr_enabled=no module_gridmap_enabled=no module_gdnative_enabled=no module_etc_enabled=no module_dds_enabled=no module_freetype_enabled=no module_csg_enabled=no module_bullet_enabled=no module_bmp_enabled=no debug_symbols=no progress=no vulkan=no optimize=size production=no use_lto=no
            artifact: true
    steps:
      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Download build.zip
        env:
          ITCH_API_KEY: ${{ secrets.ITCH_API_KEY }}
          repo: gdscript-transpiler-bin
          username: linuxusergd
          artifact_name: gdscript-transpiler-bin-linux.zip
        run: |
          gameid=$(curl https://$username.itch.io/$repo/data.json | sed -E 's/.*"id":"?([^,"]*)"?.*/\1/')
          uploadid=$(curl https://itch.io/api/1/$ITCH_API_KEY/game/$gameid/uploads | grep -o -P '"id":.*?",' | sed 's/"\|,//g' | grep "$artifact_name" | cut -d: -f 2 | cut -b -7)
          gameurl=$(curl https://itch.io/api/1/$ITCH_API_KEY/upload/$uploadid/download | sed 's/.*"url":"\{0,1\}\([^,"]*\)"\{0,1\}.*/\1/' | sed 's/\\//g')
          curl $gameurl -o build.zip

      - name: Setup latest Alpine Linux
        uses: jirutka/setup-alpine@v1
        with:
          branch: edge
          arch: x86_64
          packages: >
            alsa-lib-dev
            libffi-dev
            ncurses-dev
            tcl-dev
            tk-dev
            zlib-dev
            gettext-dev
            wget
            curl
            perl
            libgcc
            gcc
            clang15-dev
            clang15-extra-tools
            clang15-libclang
            clang15-libs
            clang15-static
            llvm15-dev
            llvm-runtimes
            llvm-libunwind-dev
            llvm-libunwind-static
            llvm15-libs
            llvm15-static
            compiler-rt
            musl-dev
            openssl-dev
            linux-headers
            patchelf
            pkgconf
            make
            git
            bash
            tar
            file
            gzip
            sudo
            xz
          shell-name: alpine.sh

      - name: Run script inside Alpine chroot
        env:
          github_token: ${{ secrets.TOKEN }}
        run: |
          export PYTHON_VERSION=3.10.9
          export REQUESTS_VERSION=2.28.1-r1-1
          export OPENSSL_VERSION=1.1.1s
          wget https://github.com/LinuxUserGD/Nuitka-Python/releases/download/v${PYTHON_VERSION}/python-${PYTHON_VERSION}.tar.xz
          wget https://github.com/LinuxUserGD/Nuitka-Python/releases/download/v${PYTHON_VERSION}/requests-${REQUESTS_VERSION}.tar.xz
          wget https://github.com/LinuxUserGD/Nuitka-Python/releases/download/v${PYTHON_VERSION}/openssl-${OPENSSL_VERSION}.tar.xz
          sudo mv python-${PYTHON_VERSION}.tar.xz /
          sudo mv requests-${REQUESTS_VERSION}.tar.xz /
          sudo mv openssl-${OPENSSL_VERSION}.tar.xz /
          cd /
          sudo tar xpvf python-${PYTHON_VERSION}.tar.xz --xattrs-include='*.*' --numeric-owner
          sudo tar xpvf requests-${REQUESTS_VERSION}.tar.xz --xattrs-include='*.*' --numeric-owner
          sudo tar xpvf openssl-${OPENSSL_VERSION}.tar.xz --xattrs-include='*.*' --numeric-owner
          cd -
          git clone https://gist.github.com/73d8e030a44eb7f91bdeaea96a321f6d.git
          mv 73d8e030a44eb7f91bdeaea96a321f6d/* .
          rm -r 73d8e030a44eb7f91bdeaea96a321f6d
          wget https://bootstrap.pypa.io/pip/get-pip.py
          sudo python3.10 get-pip.py
          sudo python3.10 -m pip install -r requirements.txt
          sudo python3.10 -m pip install git+https://github.com/Nuitka/Nuitka.git
          sudo python3.10 -m pip install git+https://github.com/rocky/python-xdis.git
          sudo python3.10 -m pip install git+https://github.com/rocky/x-python.git
          sudo python3.10 -m pip install requests
          sudo ln -sf /usr/bin/python3.10 /usr/bin/python
          rm *.import
          rm project.godot
          mkdir binary && mv build.zip binary/
          cd binary && unzip build.zip
          sudo chmod +x gds
          ./gds format=../bin/gds.gd
          ./gds setup=../setup.py
          cd ..
          python3.10 -m nuitka bin/gds.py --onefile --lto=yes --static-libpython=no --clang --assume-yes-for-downloads --include-package-data=blib2to3 --include-package-data=ziglang
          mv gds/*.py .
          mv bin/*.py .
          mv test/*.py .
          tar -cJf archive.tar.xz *.py README.md
          rm *.py README.md
          mv .github/workflows/api.py .
          echo "Uploading files to gist..."
          python3.10 api.py
          mv gds.bin bin/gds
          echo ${PWD}
        shell: alpine.sh {0}

      - name: Upload main.dist
        uses: actions/upload-artifact@v3
        with:
          name: Linux Build
          path: /home/runner/work/gdscript-transpiler-bin/gdscript-transpiler-bin/bin/gds

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
          delete_workflow_pattern: Upload
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
          delete_workflow_pattern: Build
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
          delete_workflow_pattern: Template
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
          delete_workflow_pattern: OSSAR
